/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  z as zod
} from 'zod'

/**
 * @summary Auth:Jwt.Login
 */
export const authJwtLoginApiAuthLoginPostResponse = zod.any()

/**
 * @summary Auth:Jwt.Logout
 */
export const authJwtLogoutApiAuthLogoutPostResponse = zod.any()

/**
 * @summary Oauth:Google.Jwt.Authorize
 */
export const oauthGoogleJwtAuthorizeApiAuthGoogleAuthorizeGetQueryParams = zod.object({
  "scopes": zod.array(zod.string()).optional()
})

export const oauthGoogleJwtAuthorizeApiAuthGoogleAuthorizeGetResponse = zod.object({
  "authorization_url": zod.string()
})

/**
 * The response varies based on the authentication backend used.
 * @summary Oauth:Google.Jwt.Callback
 */
export const oauthGoogleJwtCallbackApiAuthGoogleCallbackGetQueryParams = zod.object({
  "code": zod.string().or(zod.null()).optional(),
  "code_verifier": zod.string().or(zod.null()).optional(),
  "state": zod.string().or(zod.null()).optional(),
  "error": zod.string().or(zod.null()).optional()
})

export const oauthGoogleJwtCallbackApiAuthGoogleCallbackGetResponse = zod.any()

/**
 * @summary Register:Register
 */
export const registerRegisterApiAuthRegisterPostBody = zod.object({
  "email": zod.string().email(),
  "password": zod.string(),
  "is_active": zod.boolean().or(zod.null()).optional(),
  "is_superuser": zod.boolean().or(zod.null()).optional(),
  "is_verified": zod.boolean().or(zod.null()).optional()
})

/**
 * @summary Reset:Forgot Password
 */
export const resetForgotPasswordApiAuthForgotPasswordPostBody = zod.object({
  "email": zod.string().email()
})

/**
 * @summary Reset:Reset Password
 */
export const resetResetPasswordApiAuthResetPasswordPostBody = zod.object({
  "token": zod.string(),
  "password": zod.string()
})

export const resetResetPasswordApiAuthResetPasswordPostResponse = zod.any()

/**
 * @summary Verify:Request-Token
 */
export const verifyRequestTokenApiAuthRequestVerifyTokenPostBody = zod.object({
  "email": zod.string().email()
})

/**
 * @summary Verify:Verify
 */
export const verifyVerifyApiAuthVerifyPostBody = zod.object({
  "token": zod.string()
})

export const verifyVerifyApiAuthVerifyPostResponse = zod.object({
  "id": zod.string(),
  "email": zod.string().email(),
  "is_active": zod.boolean().optional(),
  "is_superuser": zod.boolean().optional(),
  "is_verified": zod.boolean().optional()
})

